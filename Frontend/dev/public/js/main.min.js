/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./assets/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/main.js":
/*!***************************!*\
  !*** ./assets/js/main.js ***!
  \***************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var regenerator_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");
/* harmony import */ var regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime__WEBPACK_IMPORTED_MODULE_0__);
function asyncGeneratorStep(a,b,c,d,e,f,g){try{var h=a[f](g),i=h.value}catch(a){return void c(a)}h.done?b(i):Promise.resolve(i).then(d,e)}function _asyncToGenerator(a){return function(){var b=this,c=arguments;return new Promise(function(d,e){function f(a){asyncGeneratorStep(h,d,e,f,g,"next",a)}function g(a){asyncGeneratorStep(h,d,e,f,g,"throw",a)}var h=a.apply(b,c);f(void 0)})}}document.addEventListener("DOMContentLoaded",setup,!1),window.addEventListener("resize",function(){return resizeWindows()["catch"](console.error)});var canvas,currentWindowMode,landscapeImageData,portraitImageData,currentImageData,backendUrl="https://beibootapi.herokuapp.com",quoteApiUrl="https://quotes.rest/qod",fontFamily="Barlow Regular";/**
 * @returns {Promise<void>}
 */function setup(){setWindowMode(),setCanvasSize(),loadImageData().then(function(){setCurrentImageData(),drawContent()})}function setWindowMode(){currentWindowMode=window.innerHeight>=window.innerWidth?"portrait":"landscape"}function setCurrentImageData(){currentImageData="portrait"===currentWindowMode?portraitImageData:landscapeImageData}function setCanvasSize(){canvas=document.getElementById("myCanvas"),canvas.height=window.innerHeight,canvas.width=window.innerWidth}function resizeWindows(){return _resizeWindows.apply(this,arguments)}/**
 * @returns {void}
 */function _resizeWindows(){return _resizeWindows=_asyncToGenerator(/*#__PURE__*/regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function a(){return regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return setWindowMode(),setCanvasSize(),setCurrentImageData(),a.next=5,drawContent();case 5:case"end":return a.stop();}},a)})),_resizeWindows.apply(this,arguments)}function drawContent(){return _drawContent.apply(this,arguments)}function _drawContent(){return _drawContent=_asyncToGenerator(/*#__PURE__*/regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function a(){var b,c,d,e,f,g;return regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return canvas=document.getElementById("myCanvas"),b=canvas.getContext("2d"),a.next=4,loadQuote();case 4:return c=a.sent,d=pickGradientColor(currentImageData.hexcodes),e=new Promise(function(a){var b=new Image;b.src="".concat(backendUrl,"/image/").concat(currentImageData.image),b.onload=function(){a(b)}}),a.next=9,e;case 9:f=a.sent,g=Math.max(canvas.height/f.height,canvas.width/f.width),b.drawImage(f,0,0,f.width*g,f.height*g),drawGradient(d),drawQuote(d.hsl[2],c);case 14:case"end":return a.stop();}},a)})),_drawContent.apply(this,arguments)}function pickGradientColor(a){for(var b,c="",d=0,e=1;e<a.length;e++)b=0,b=a[0].hsl[2]<a[e].hsl[2]?a[e].hsl[2]-a[0].hsl[2]:a[0].hsl[2]-a[e].hsl[2],d<b&&(d=b,c=a[e]);return c}/**
 * @param {String} primaryImageColor
 * returns {void}
 */function drawGradient(a){var b=canvas.getContext("2d"),c="portrait"===currentWindowMode?b.createLinearGradient(0,canvas.height,0,canvas.height/2):b.createLinearGradient(canvas.width,0,canvas.width/2,0);c.addColorStop(0,a.color),c.addColorStop(.7,"rgba(".concat(a.rgb[0],",").concat(a.rgb[1],",").concat(a.rgb[2],",0.4)")),c.addColorStop(1,"rgba(".concat(a.rgb[0],",").concat(a.rgb[1],",").concat(a.rgb[2],",0.1)")),b.fillStyle=c,b.fillRect(0,0,canvas.width,canvas.height)}/**
 * @param {Number} primaryColorLuma
 * @param {Quote} quote
 * returns {void}
 */function drawQuote(a,b){for(var c,d=canvas.getContext("2d"),e=50,f=formatUsingLinebreaks(b.text,e),g=.5>a?"#ffffff":"#000000",h=[],j=[],k=0;k<f.length;k++)c=calculateTextDimensions(f[k],e),h.push(c);for(var v=0;v<h.length;v++)j.push(h[v].width);var l=Math.max.apply(Math,j)+200,m="portrait"===currentWindowMode?canvas.width:canvas.width/3,n=l/m;if(l>m){e/=n;for(var w=0;w<h.length;w++)h[w].height/=n}for(var o=0;o<h.length;o++)h[o].height+5;var p,q,r,s,t,u;"portrait"===currentWindowMode?(t=canvas.width/2,u=canvas.height/1.5,p=canvas.width/2,q=canvas.height/1.1,r=canvas.width/2,s=canvas.height/1.05):"landscape"===currentWindowMode?(t=canvas.width/1.25,u=canvas.height/2.5,p=canvas.width/1.25,q=canvas.height/1.25,r=canvas.width/1.25,s=canvas.height/1.15):void 0;renderMultilineString(h,t,u,g,e),d.fillStyle=g,d.font="".concat(16>e-5?16:e-6,"pt ").concat(fontFamily),d.textAlign="center",d.fillText(b.author,p,q),d.font="".concat(15>e-6?15:e-6,"pt ").concat(fontFamily),d.fillText("- ".concat(new Date(b.date).getFullYear()," -"),r,s)}/**
 *
 * @param { StringWithDimensions[] } lines
 * @param { Number } x
 * @param { Number } y
 * @param { String } textColor
 * @param { Number } fontSize
 */function renderMultilineString(a,b,c,d,e){var f=canvas.getContext("2d");f.textAlign="center",f.fillStyle=d,f.font="".concat(e,"pt ").concat(fontFamily);for(var g=0;g<a.length;g++)f.fillText(a[g].content,b,c),c+=a[g].height+5}/**
 * @param { String } text
 * @param { Number } fontSize
 * @returns { StringWithDimensions }
 */function calculateTextDimensions(a,b){var c=document.createElement("span");c.innerText=a,c.style.font="".concat(b,"pt ").concat(fontFamily),c.style.whiteSpace="nowrap",document.body.append(c);var d=c.getBoundingClientRect();return document.body.removeChild(c),{content:a,width:d.width,height:d.height}}/**
 *
 * @param { String } quoteText
 * @param { Number } fontSize
 * @returns { String[] }
 */function formatUsingLinebreaks(a,b){var c=canvas.getContext("2d"),d=[];c.font="".concat(b,"pt ").concat(fontFamily);for(var e,f=c.measureText(a),g=2;0<g;g--)if(e="portrait"===currentWindowMode?canvas.width:canvas.width/3,f.width>=e*g){// get how many characters are supposed to be in a line
for(var h,j=a.length/(g+1),k=0,l=0;l<g;l++)// for each target linebreak, replace the closest space with a linebreak
h=findClosestSpace(a,j*(l+1)),d.push(a.substring(k,h)),k=h+1;// end of function, the quite has been partitioned
return d.push(a.substring(k)),d}// if the quote needed no change, it is returned as-is
return[a]}/**
 *
 * @param { String } text
 * @param { Number } position
 * @returns { Number }
 * */function findClosestSpace(a,b){var c=a.indexOf(" ",b),d=a.lastIndexOf(" ",b);return-1===d||c-b<b-d?c:d}/**
 * returns {Object}
 */function loadImageData(){return _loadImageData.apply(this,arguments)}/**
 * @returns {Promise<{date: *, author: *, text: *} | {date: number, author: string, text: string}>}
 */function _loadImageData(){return _loadImageData=_asyncToGenerator(/*#__PURE__*/regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function a(){var b;return regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return b=new URL("".concat(backendUrl,"/random?mode=portrait")),a.next=3,fetch(b.toString()).then(function(a){return a.json()});case 3:return portraitImageData=a.sent,b=new URL("".concat(backendUrl,"/random?mode=landscape")),a.next=7,fetch(b.toString()).then(function(a){return a.json()});case 7:landscapeImageData=a.sent;case 8:case"end":return a.stop();}},a)})),_loadImageData.apply(this,arguments)}function loadQuote(){return _loadQuote.apply(this,arguments)}/**
 * @returns {void}
 */function _loadQuote(){return _loadQuote=_asyncToGenerator(/*#__PURE__*/regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function a(){var b,c,d;return regenerator_runtime__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return b=new Request(quoteApiUrl),b.headers.append("Accept","application/json"),a.next=4,fetch(b);case 4:if(c=a.sent,200!==c.status){a.next=11;break}return a.next=8,c.json();case 8:if(d=a.sent,!(150>=d.contents.quotes[0].quote.length)){a.next=11;break}return a.abrupt("return",{text:"\xAB".concat(d.contents.quotes[0].quote,"\xBB"),author:d.contents.quotes[0].author,date:d.contents.quotes[0].date});case 11:return a.abrupt("return",{text:"\xABWe are not makers of history. We are made by history.\xBB",author:"Martin Luther King Jr.",date:"1960-1-1"});case 12:case"end":return a.stop();}},a)})),_loadQuote.apply(this,arguments)}function renderOfflineImage(){canvas=document.getElementById("myCanvas");var a=new Image,b=canvas.getContext("2d");a.src="/images/offlineImage.png",a.onload=function(){b.drawImage(a,0,0)}}/**
 * @typedef {Object} StringWithDimensions
 * @property {String} content
 * @property {Number} width
 * @property {Number} height
 */ /**
 * @typedef {Object} Quote
 * @property {String} text
 * @property {String} author
 * @property {String} date
 */

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : undefined
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyJdLCJuYW1lcyI6WyJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXR1cCIsIndpbmRvdyIsInJlc2l6ZVdpbmRvd3MiLCJjb25zb2xlIiwiZXJyb3IiLCJjYW52YXMiLCJjdXJyZW50V2luZG93TW9kZSIsImxhbmRzY2FwZUltYWdlRGF0YSIsInBvcnRyYWl0SW1hZ2VEYXRhIiwiY3VycmVudEltYWdlRGF0YSIsImJhY2tlbmRVcmwiLCJxdW90ZUFwaVVybCIsImZvbnRGYW1pbHkiLCJzZXRXaW5kb3dNb2RlIiwic2V0Q2FudmFzU2l6ZSIsImxvYWRJbWFnZURhdGEiLCJ0aGVuIiwic2V0Q3VycmVudEltYWdlRGF0YSIsImRyYXdDb250ZW50IiwiaW5uZXJIZWlnaHQiLCJpbm5lcldpZHRoIiwiZ2V0RWxlbWVudEJ5SWQiLCJoZWlnaHQiLCJ3aWR0aCIsImN0eCIsImdldENvbnRleHQiLCJsb2FkUXVvdGUiLCJxdW90ZSIsImdyYWRpZW50Q29sb3IiLCJwaWNrR3JhZGllbnRDb2xvciIsImhleGNvZGVzIiwiaW1hZ2VQcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJpbWFnZSIsIkltYWdlIiwic3JjIiwib25sb2FkIiwic2NhbGUiLCJNYXRoIiwibWF4IiwiZHJhd0ltYWdlIiwiZHJhd0dyYWRpZW50IiwiZHJhd1F1b3RlIiwiaHNsIiwiY3VycmVudERpZmZlcmVuY2UiLCJyZXN1bHQiLCJkaWZmZXJlbmNlIiwiaSIsImxlbmd0aCIsInByaW1hcnlJbWFnZUNvbG9yIiwiZ3JkIiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJhZGRDb2xvclN0b3AiLCJjb2xvciIsInJnYiIsImZpbGxTdHlsZSIsImZpbGxSZWN0IiwicHJpbWFyeUNvbG9yTHVtYSIsImRpbWVuc2lvbnMiLCJmb250U2l6ZSIsImZvcm1hdHRlZFF1b3RlIiwiZm9ybWF0VXNpbmdMaW5lYnJlYWtzIiwidGV4dCIsImZvbnRDb2xvciIsImxpbmVzIiwiY2FsY3VsYXRlVGV4dERpbWVuc2lvbnMiLCJwdXNoIiwiZXhjZXNzIiwibmV3V2lkdGgiLCJmYWN0b3IiLCJhdXRob3JYIiwiYXV0aG9yWSIsImRhdGVYIiwiZGF0ZVkiLCJxdW90ZVgiLCJxdW90ZVkiLCJyZW5kZXJNdWx0aWxpbmVTdHJpbmciLCJmb250IiwidGV4dEFsaWduIiwiZmlsbFRleHQiLCJhdXRob3IiLCJEYXRlIiwiZGF0ZSIsImdldEZ1bGxZZWFyIiwieCIsInkiLCJ0ZXh0Q29sb3IiLCJjb250ZW50Iiwic3BhbiIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lclRleHQiLCJzdHlsZSIsIndoaXRlU3BhY2UiLCJib2R5IiwiYXBwZW5kIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmVtb3ZlQ2hpbGQiLCJxdW90ZVRleHQiLCJ0ZXh0V2lkdGgiLCJtZWFzdXJlVGV4dCIsImxpbmVCcmVhayIsInNwYWNlSW5kZXgiLCJjaGFyQ291bnQiLCJsYXN0SW5kZXgiLCJmaW5kQ2xvc2VzdFNwYWNlIiwic3Vic3RyaW5nIiwicG9zaXRpb24iLCJyaWdodCIsImluZGV4T2YiLCJsZWZ0IiwibGFzdEluZGV4T2YiLCJ1cmwiLCJVUkwiLCJmZXRjaCIsInRvU3RyaW5nIiwicmVzcG9uc2UiLCJqc29uIiwicmVxdWVzdCIsIlJlcXVlc3QiLCJoZWFkZXJzIiwic3RhdHVzIiwiY29udGVudHMiLCJxdW90ZXMiLCJyZW5kZXJPZmZsaW5lSW1hZ2UiXSwibWFwcGluZ3MiOiI7UUFBQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTs7O1FBR0E7UUFDQTs7UUFFQTtRQUNBOztRQUVB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OztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsU0FBUztBQUNUO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQ0FBb0MsY0FBYztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNB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QUFDQSIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL2Fzc2V0cy9qcy9tYWluLmpzXCIpO1xuIiwiaW1wb3J0IHJlZ2VuZXJhdG9yUnVudGltZSBmcm9tICdyZWdlbmVyYXRvci1ydW50aW1lJztcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBzZXR1cCwgZmFsc2UpO1xyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4gcmVzaXplV2luZG93cygpLmNhdGNoKGNvbnNvbGUuZXJyb3IpKTtcclxuXHJcbmxldCBjYW52YXMsIGN1cnJlbnRXaW5kb3dNb2RlLCBsYW5kc2NhcGVJbWFnZURhdGEsIHBvcnRyYWl0SW1hZ2VEYXRhLCBjdXJyZW50SW1hZ2VEYXRhO1xyXG5jb25zdCBiYWNrZW5kVXJsID0gJ2h0dHBzOi8vYmVpYm9vdGFwaS5oZXJva3VhcHAuY29tJztcclxuY29uc3QgcXVvdGVBcGlVcmwgPSAnaHR0cHM6Ly9xdW90ZXMucmVzdC9xb2QnO1xyXG5jb25zdCBmb250RmFtaWx5ID0gJ0JhcmxvdyBSZWd1bGFyJztcclxuXHJcbi8qKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cclxuICovXHJcbmZ1bmN0aW9uIHNldHVwKCkge1xyXG4gICAgc2V0V2luZG93TW9kZSgpO1xyXG4gICAgc2V0Q2FudmFzU2l6ZSgpO1xyXG4gICAgbG9hZEltYWdlRGF0YSgpXHJcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBzZXRDdXJyZW50SW1hZ2VEYXRhKCk7XHJcbiAgICAgICAgICAgIGRyYXdDb250ZW50KCk7XHJcbiAgICAgICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldFdpbmRvd01vZGUoKSB7XHJcbiAgICBpZih3aW5kb3cuaW5uZXJIZWlnaHQgPj0gd2luZG93LmlubmVyV2lkdGgpe1xyXG4gICAgICAgIGN1cnJlbnRXaW5kb3dNb2RlID0gJ3BvcnRyYWl0JztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY3VycmVudFdpbmRvd01vZGUgPSAnbGFuZHNjYXBlJztcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2V0Q3VycmVudEltYWdlRGF0YSgpe1xyXG4gICAgaWYoY3VycmVudFdpbmRvd01vZGUgPT09ICdwb3J0cmFpdCcpIHtcclxuICAgICAgICBjdXJyZW50SW1hZ2VEYXRhID0gcG9ydHJhaXRJbWFnZURhdGE7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGN1cnJlbnRJbWFnZURhdGEgPSBsYW5kc2NhcGVJbWFnZURhdGE7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldENhbnZhc1NpemUoKXtcclxuICAgIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdteUNhbnZhcycpO1xyXG4gICAgY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgIGNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiByZXNpemVXaW5kb3dzKCkge1xyXG4gICAgc2V0V2luZG93TW9kZSgpO1xyXG4gICAgc2V0Q2FudmFzU2l6ZSgpO1xyXG4gICAgc2V0Q3VycmVudEltYWdlRGF0YSgpO1xyXG4gICAgYXdhaXQgZHJhd0NvbnRlbnQoKTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGRyYXdDb250ZW50KCkge1xyXG4gICAgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ215Q2FudmFzJyk7XHJcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcbiAgICBjb25zdCBxdW90ZSA9IGF3YWl0IGxvYWRRdW90ZSgpO1xyXG5cclxuICAgIGNvbnN0IGdyYWRpZW50Q29sb3IgPSBwaWNrR3JhZGllbnRDb2xvcihjdXJyZW50SW1hZ2VEYXRhLmhleGNvZGVzKTtcclxuXHJcbiAgICBjb25zdCBpbWFnZVByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgaW1hZ2Uuc3JjID0gYCR7YmFja2VuZFVybH0vaW1hZ2UvJHtjdXJyZW50SW1hZ2VEYXRhLmltYWdlfWA7XHJcbiAgICAgICAgaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICByZXNvbHZlKGltYWdlKTtcclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCBpbWFnZSA9IGF3YWl0IGltYWdlUHJvbWlzZTtcclxuICAgIGNvbnN0IHNjYWxlID0gTWF0aC5tYXgoY2FudmFzLmhlaWdodCAvIGltYWdlLmhlaWdodCwgY2FudmFzLndpZHRoIC8gaW1hZ2Uud2lkdGgpO1xyXG5cclxuICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDAsIGltYWdlLndpZHRoICogc2NhbGUsIGltYWdlLmhlaWdodCAqIHNjYWxlKTtcclxuXHJcbiAgICBkcmF3R3JhZGllbnQoZ3JhZGllbnRDb2xvcik7XHJcbiAgICBkcmF3UXVvdGUoZ3JhZGllbnRDb2xvci5oc2xbMl0sIHF1b3RlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGlja0dyYWRpZW50Q29sb3IoaGV4Y29kZXMpe1xyXG4gICAgbGV0IHJlc3VsdCA9ICcnO1xyXG4gICAgbGV0IGRpZmZlcmVuY2UgPSAwO1xyXG5cclxuICAgIGZvcihsZXQgaSA9IDE7IGkgPCBoZXhjb2Rlcy5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgbGV0IGN1cnJlbnREaWZmZXJlbmNlID0gMDtcclxuICAgICAgICBpZihoZXhjb2Rlc1swXS5oc2xbMl0gPCBoZXhjb2Rlc1tpXS5oc2xbMl0pe1xyXG4gICAgICAgICAgICBjdXJyZW50RGlmZmVyZW5jZSA9IGhleGNvZGVzW2ldLmhzbFsyXSAtIGhleGNvZGVzWzBdLmhzbFsyXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjdXJyZW50RGlmZmVyZW5jZSA9IGhleGNvZGVzWzBdLmhzbFsyXSAtIGhleGNvZGVzW2ldLmhzbFsyXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKGRpZmZlcmVuY2UgPCBjdXJyZW50RGlmZmVyZW5jZSl7XHJcbiAgICAgICAgICAgIGRpZmZlcmVuY2UgPSBjdXJyZW50RGlmZmVyZW5jZTtcclxuICAgICAgICAgICAgcmVzdWx0ID0gaGV4Y29kZXNbaV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gcHJpbWFyeUltYWdlQ29sb3JcclxuICogcmV0dXJucyB7dm9pZH1cclxuICovXHJcbmZ1bmN0aW9uIGRyYXdHcmFkaWVudChwcmltYXJ5SW1hZ2VDb2xvcikge1xyXG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICBjb25zdCBncmQgPSBjdXJyZW50V2luZG93TW9kZSA9PT0gJ3BvcnRyYWl0JyA/IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCBjYW52YXMuaGVpZ2h0LCAwLCBjYW52YXMuaGVpZ2h0IC8gMikgOiBjdHguY3JlYXRlTGluZWFyR3JhZGllbnQoY2FudmFzLndpZHRoLCAwLCBjYW52YXMud2lkdGggLyAyLDApO1xyXG5cclxuICAgIGdyZC5hZGRDb2xvclN0b3AoMCwgcHJpbWFyeUltYWdlQ29sb3IuY29sb3IpO1xyXG4gICAgZ3JkLmFkZENvbG9yU3RvcCgwLjcsIGByZ2JhKCR7cHJpbWFyeUltYWdlQ29sb3IucmdiWzBdfSwke3ByaW1hcnlJbWFnZUNvbG9yLnJnYlsxXX0sJHtwcmltYXJ5SW1hZ2VDb2xvci5yZ2JbMl19LDAuNClgKTtcclxuICAgIGdyZC5hZGRDb2xvclN0b3AoMSwgYHJnYmEoJHtwcmltYXJ5SW1hZ2VDb2xvci5yZ2JbMF19LCR7cHJpbWFyeUltYWdlQ29sb3IucmdiWzFdfSwke3ByaW1hcnlJbWFnZUNvbG9yLnJnYlsyXX0sMC4xKWApO1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9IGdyZDtcclxuICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG59XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtOdW1iZXJ9IHByaW1hcnlDb2xvckx1bWFcclxuICogQHBhcmFtIHtRdW90ZX0gcXVvdGVcclxuICogcmV0dXJucyB7dm9pZH1cclxuICovXHJcbmZ1bmN0aW9uIGRyYXdRdW90ZShwcmltYXJ5Q29sb3JMdW1hLCBxdW90ZSkge1xyXG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICBsZXQgZm9udFNpemUgPSA1MDtcclxuICAgIGNvbnN0IGZvcm1hdHRlZFF1b3RlID0gZm9ybWF0VXNpbmdMaW5lYnJlYWtzKHF1b3RlLnRleHQsIGZvbnRTaXplKTtcclxuICAgIGNvbnN0IGZvbnRDb2xvciA9IHByaW1hcnlDb2xvckx1bWEgPCAwLjUgPyAnI2ZmZmZmZicgOiAnIzAwMDAwMCc7XHJcblxyXG4gICAgbGV0IGxpbmVzID0gW107XHJcbiAgICBsZXQgd2lkdGggPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm9ybWF0dGVkUXVvdGUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBkaW1lbnNpb25zID0gY2FsY3VsYXRlVGV4dERpbWVuc2lvbnMoZm9ybWF0dGVkUXVvdGVbaV0sIGZvbnRTaXplKTtcclxuICAgICAgICBsaW5lcy5wdXNoKGRpbWVuc2lvbnMpO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHdpZHRoLnB1c2gobGluZXNbaV0ud2lkdGgpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZXhjZXNzID0gTWF0aC5tYXgoLi4ud2lkdGgpICsgMjAwO1xyXG4gICAgY29uc3QgbmV3V2lkdGggPSBjdXJyZW50V2luZG93TW9kZSA9PT0gJ3BvcnRyYWl0JyA/IGNhbnZhcy53aWR0aCA6IGNhbnZhcy53aWR0aCAvIDM7XHJcbiAgICBjb25zdCBmYWN0b3IgPSBleGNlc3MgLyBuZXdXaWR0aDtcclxuICAgIGlmIChleGNlc3MgPiBuZXdXaWR0aCkge1xyXG4gICAgICAgIGZvbnRTaXplID0gZm9udFNpemUgLyBmYWN0b3I7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsaW5lc1tpXS5oZWlnaHQgPSBsaW5lc1tpXS5oZWlnaHQgLyBmYWN0b3I7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCBjb3VudCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY291bnQgKz0gbGluZXNbaV0uaGVpZ2h0ICsgNTtcclxuICAgIH1cclxuICAgIGxldCBhdXRob3JYLCBhdXRob3JZLCBkYXRlWCwgZGF0ZVksIHF1b3RlWCwgcXVvdGVZO1xyXG4gICAgc3dpdGNoIChjdXJyZW50V2luZG93TW9kZSkge1xyXG4gICAgICAgIGNhc2UgJ3BvcnRyYWl0JzpcclxuICAgICAgICAgICAgcXVvdGVYID0gY2FudmFzLndpZHRoIC8gMjtcclxuICAgICAgICAgICAgcXVvdGVZID0gY2FudmFzLmhlaWdodCAvIDEuNTtcclxuICAgICAgICAgICAgYXV0aG9yWCA9IGNhbnZhcy53aWR0aCAvIDI7XHJcbiAgICAgICAgICAgIGF1dGhvclkgPSBjYW52YXMuaGVpZ2h0IC8gMS4xO1xyXG4gICAgICAgICAgICBkYXRlWCA9IGNhbnZhcy53aWR0aCAvIDI7XHJcbiAgICAgICAgICAgIGRhdGVZID0gY2FudmFzLmhlaWdodCAvIDEuMDU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ2xhbmRzY2FwZSc6XHJcbiAgICAgICAgICAgIHF1b3RlWCA9IGNhbnZhcy53aWR0aCAvIDEuMjU7XHJcbiAgICAgICAgICAgIHF1b3RlWSA9IGNhbnZhcy5oZWlnaHQgLyAyLjU7XHJcbiAgICAgICAgICAgIGF1dGhvclggPSBjYW52YXMud2lkdGggLyAxLjI1O1xyXG4gICAgICAgICAgICBhdXRob3JZID0gY2FudmFzLmhlaWdodCAvIDEuMjU7XHJcbiAgICAgICAgICAgIGRhdGVYID0gY2FudmFzLndpZHRoIC8gMS4yNTtcclxuICAgICAgICAgICAgZGF0ZVkgPSBjYW52YXMuaGVpZ2h0IC8gMS4xNTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICByZW5kZXJNdWx0aWxpbmVTdHJpbmcobGluZXMsIHF1b3RlWCwgcXVvdGVZLCBmb250Q29sb3IsIGZvbnRTaXplKTtcclxuICAgIGN0eC5maWxsU3R5bGUgPSBmb250Q29sb3I7XHJcbiAgICBjdHguZm9udCA9IGAke2ZvbnRTaXplIC0gNSA8IDE2ID8gMTYgOiBmb250U2l6ZSAtIDZ9cHQgJHtmb250RmFtaWx5fWA7XHJcbiAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XHJcbiAgICBjdHguZmlsbFRleHQocXVvdGUuYXV0aG9yLCBhdXRob3JYLCBhdXRob3JZKTtcclxuICAgIGN0eC5mb250ID0gYCR7Zm9udFNpemUgLSA2IDwgMTUgPyAxNSA6IGZvbnRTaXplIC0gNn1wdCAke2ZvbnRGYW1pbHl9YDtcclxuICAgIGN0eC5maWxsVGV4dChgLSAke25ldyBEYXRlKHF1b3RlLmRhdGUpLmdldEZ1bGxZZWFyKCl9IC1gLCBkYXRlWCwgZGF0ZVkpO1xyXG59XHJcblxyXG4vKipcclxuICpcclxuICogQHBhcmFtIHsgU3RyaW5nV2l0aERpbWVuc2lvbnNbXSB9IGxpbmVzXHJcbiAqIEBwYXJhbSB7IE51bWJlciB9IHhcclxuICogQHBhcmFtIHsgTnVtYmVyIH0geVxyXG4gKiBAcGFyYW0geyBTdHJpbmcgfSB0ZXh0Q29sb3JcclxuICogQHBhcmFtIHsgTnVtYmVyIH0gZm9udFNpemVcclxuICovXHJcbmZ1bmN0aW9uIHJlbmRlck11bHRpbGluZVN0cmluZyhsaW5lcywgeCwgeSwgdGV4dENvbG9yLCBmb250U2l6ZSkge1xyXG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XHJcbiAgICBjdHguZmlsbFN0eWxlID0gdGV4dENvbG9yO1xyXG4gICAgY3R4LmZvbnQgPSBgJHtmb250U2l6ZX1wdCAke2ZvbnRGYW1pbHl9YDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjdHguZmlsbFRleHQobGluZXNbaV0uY29udGVudCwgeCwgeSk7XHJcbiAgICAgICAgeSArPSBsaW5lc1tpXS5oZWlnaHQgKyA1O1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogQHBhcmFtIHsgU3RyaW5nIH0gdGV4dFxyXG4gKiBAcGFyYW0geyBOdW1iZXIgfSBmb250U2l6ZVxyXG4gKiBAcmV0dXJucyB7IFN0cmluZ1dpdGhEaW1lbnNpb25zIH1cclxuICovXHJcbmZ1bmN0aW9uIGNhbGN1bGF0ZVRleHREaW1lbnNpb25zKHRleHQsIGZvbnRTaXplKSB7XHJcbiAgICBjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgc3Bhbi5pbm5lclRleHQgPSB0ZXh0O1xyXG4gICAgc3Bhbi5zdHlsZS5mb250ID0gYCR7Zm9udFNpemV9cHQgJHtmb250RmFtaWx5fWA7XHJcbiAgICBzcGFuLnN0eWxlLndoaXRlU3BhY2UgPSAnbm93cmFwJztcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHNwYW4pO1xyXG4gICAgY29uc3QgZGltZW5zaW9ucyA9IHNwYW4uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNwYW4pO1xyXG4gICAgcmV0dXJuIHtjb250ZW50OiB0ZXh0LCB3aWR0aDogZGltZW5zaW9ucy53aWR0aCwgaGVpZ2h0OiBkaW1lbnNpb25zLmhlaWdodH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0geyBTdHJpbmcgfSBxdW90ZVRleHRcclxuICogQHBhcmFtIHsgTnVtYmVyIH0gZm9udFNpemVcclxuICogQHJldHVybnMgeyBTdHJpbmdbXSB9XHJcbiAqL1xyXG5mdW5jdGlvbiBmb3JtYXRVc2luZ0xpbmVicmVha3MocXVvdGVUZXh0LCBmb250U2l6ZSkge1xyXG4gICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICBjb25zdCBtYXhMaW5lQnJlYWtzID0gMjtcclxuICAgIGNvbnN0IGxpbmVzID0gW107XHJcbiAgICBjdHguZm9udCA9IGAke2ZvbnRTaXplfXB0ICR7Zm9udEZhbWlseX1gO1xyXG4gICAgY29uc3QgdGV4dFdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KHF1b3RlVGV4dCk7XHJcblxyXG4gICAgZm9yIChsZXQgbGluZUJyZWFrID0gbWF4TGluZUJyZWFrczsgbGluZUJyZWFrID4gMDsgbGluZUJyZWFrLS0pIHtcclxuICAgICAgICAvLyBjaGVjayBpZiB0aGUgY3VycmVudCBhbW91bnQgb2YgbGluZWJyZWFrcyBpcyBqdXN0aWZpZWRcclxuICAgICAgICBjb25zdCBuZXdXaWR0aCA9IGN1cnJlbnRXaW5kb3dNb2RlID09PSAncG9ydHJhaXQnID8gY2FudmFzLndpZHRoIDogY2FudmFzLndpZHRoIC8gMztcclxuICAgICAgICBpZiAodGV4dFdpZHRoLndpZHRoID49IG5ld1dpZHRoICogbGluZUJyZWFrKSB7XHJcbiAgICAgICAgICAgIC8vIGdldCBob3cgbWFueSBjaGFyYWN0ZXJzIGFyZSBzdXBwb3NlZCB0byBiZSBpbiBhIGxpbmVcclxuICAgICAgICAgICAgY29uc3QgY2hhckNvdW50ID0gcXVvdGVUZXh0Lmxlbmd0aCAvIChsaW5lQnJlYWsgKyAxKTtcclxuICAgICAgICAgICAgbGV0IGxhc3RJbmRleCA9IDA7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZUJyZWFrOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIC8vIGZvciBlYWNoIHRhcmdldCBsaW5lYnJlYWssIHJlcGxhY2UgdGhlIGNsb3Nlc3Qgc3BhY2Ugd2l0aCBhIGxpbmVicmVha1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3BhY2VJbmRleCA9IGZpbmRDbG9zZXN0U3BhY2UocXVvdGVUZXh0LCBjaGFyQ291bnQgKiAoaSArIDEpKTtcclxuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2gocXVvdGVUZXh0LnN1YnN0cmluZyhsYXN0SW5kZXgsIHNwYWNlSW5kZXgpKTtcclxuICAgICAgICAgICAgICAgIGxhc3RJbmRleCA9IHNwYWNlSW5kZXggKyAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxpbmVzLnB1c2gocXVvdGVUZXh0LnN1YnN0cmluZyhsYXN0SW5kZXgpKTtcclxuICAgICAgICAgICAgLy8gZW5kIG9mIGZ1bmN0aW9uLCB0aGUgcXVpdGUgaGFzIGJlZW4gcGFydGl0aW9uZWRcclxuICAgICAgICAgICAgcmV0dXJuIGxpbmVzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBpZiB0aGUgcXVvdGUgbmVlZGVkIG5vIGNoYW5nZSwgaXQgaXMgcmV0dXJuZWQgYXMtaXNcclxuICAgIHJldHVybiBbcXVvdGVUZXh0XTtcclxufVxyXG5cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSB7IFN0cmluZyB9IHRleHRcclxuICogQHBhcmFtIHsgTnVtYmVyIH0gcG9zaXRpb25cclxuICogQHJldHVybnMgeyBOdW1iZXIgfVxyXG4gKiAqL1xyXG5mdW5jdGlvbiBmaW5kQ2xvc2VzdFNwYWNlKHRleHQsIHBvc2l0aW9uKSB7XHJcbiAgICBjb25zdCByaWdodCA9IHRleHQuaW5kZXhPZignICcsIHBvc2l0aW9uKTtcclxuICAgIGNvbnN0IGxlZnQgPSB0ZXh0Lmxhc3RJbmRleE9mKCcgJywgcG9zaXRpb24pO1xyXG4gICAgaWYgKGxlZnQgPT09IC0xIHx8IHJpZ2h0IC0gcG9zaXRpb24gPCBwb3NpdGlvbiAtIGxlZnQpIHtcclxuICAgICAgICByZXR1cm4gcmlnaHQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBsZWZ0O1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogcmV0dXJucyB7T2JqZWN0fVxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gbG9hZEltYWdlRGF0YSgpIHtcclxuICAgIGxldCB1cmwgPSBuZXcgVVJMKGAke2JhY2tlbmRVcmx9L3JhbmRvbT9tb2RlPXBvcnRyYWl0YCk7XHJcbiAgICBwb3J0cmFpdEltYWdlRGF0YSA9IGF3YWl0IGZldGNoKHVybC50b1N0cmluZygpKVxyXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSk7XHJcblxyXG4gICAgdXJsID0gbmV3IFVSTChgJHtiYWNrZW5kVXJsfS9yYW5kb20/bW9kZT1sYW5kc2NhcGVgKTtcclxuICAgIGxhbmRzY2FwZUltYWdlRGF0YSA9IGF3YWl0IGZldGNoKHVybC50b1N0cmluZygpKVxyXG4gICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZTx7ZGF0ZTogKiwgYXV0aG9yOiAqLCB0ZXh0OiAqfSB8IHtkYXRlOiBudW1iZXIsIGF1dGhvcjogc3RyaW5nLCB0ZXh0OiBzdHJpbmd9Pn1cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGxvYWRRdW90ZSgpIHtcclxuICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgUmVxdWVzdChxdW90ZUFwaVVybCk7XHJcbiAgICByZXF1ZXN0LmhlYWRlcnMuYXBwZW5kKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChyZXF1ZXN0KTtcclxuICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDIwMCApIHtcclxuICAgICAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgIGlmKGJvZHkuY29udGVudHMucXVvdGVzWzBdLnF1b3RlLmxlbmd0aCA8PSAxNTApe1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdGV4dDogYMKrJHtib2R5LmNvbnRlbnRzLnF1b3Rlc1swXS5xdW90ZX3Cu2AsXHJcbiAgICAgICAgICAgICAgICBhdXRob3I6IGJvZHkuY29udGVudHMucXVvdGVzWzBdLmF1dGhvcixcclxuICAgICAgICAgICAgICAgIGRhdGU6IGJvZHkuY29udGVudHMucXVvdGVzWzBdLmRhdGVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHRleHQ6ICfCq1dlIGFyZSBub3QgbWFrZXJzIG9mIGhpc3RvcnkuIFdlIGFyZSBtYWRlIGJ5IGhpc3RvcnkuwrsnLFxyXG4gICAgICAgIGF1dGhvcjogJ01hcnRpbiBMdXRoZXIgS2luZyBKci4nLFxyXG4gICAgICAgIGRhdGU6ICcxOTYwLTEtMSdcclxuICAgIH07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcmV0dXJucyB7dm9pZH1cclxuICovXHJcbmZ1bmN0aW9uIHJlbmRlck9mZmxpbmVJbWFnZSgpIHtcclxuICAgIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdteUNhbnZhcycpO1xyXG4gICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2U7XHJcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcbiAgICBpbWFnZS5zcmMgPSAnL2ltYWdlcy9vZmZsaW5lSW1hZ2UucG5nJztcclxuICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjdHguZHJhd0ltYWdlKGltYWdlLCAwLCAwKTtcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFN0cmluZ1dpdGhEaW1lbnNpb25zXHJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBjb250ZW50XHJcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSB3aWR0aFxyXG4gKiBAcHJvcGVydHkge051bWJlcn0gaGVpZ2h0XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFF1b3RlXHJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSB0ZXh0XHJcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBhdXRob3JcclxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGVcclxuICovIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9